//=========================================================
//
// SPバークラス	[sp_bar.cpp]
// Author : Konishi Yuuto
//
//=========================================================

//=========================================================
// インクルード
//=========================================================
#include "sp_bar.h"
#include "manager.h"
#include "renderer.h"
#include "game.h"
#include "texture.h"

//=========================================================
// マクロ定義
//=========================================================
#define DECREASE_SP_SPEED		(1)		// 体力を減らす速度
#define REGENE_FLAME			(30)	// リジェネのフレーム
#define REGENE_NUM				(3)		// リジェネの値

//=========================================================
// ポリゴン生成
//=========================================================
CSpBar * CSpBar::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size, int nSp)
{
	// メモリ確保
	CSpBar *pSpBar = new CSpBar;

	pSpBar->SetGage(nSp);			// 体力の設定
	pSpBar->SetMaxGage(nSp);		// ライフの設定
	pSpBar->Init(pos, size);		// 初期化

	return pSpBar;
}

//=========================================================
// コンストラクタ
//=========================================================
CSpBar::CSpBar(PRIORITY Priority) : CGage(Priority)
{
	m_nRegeneCnt = 0;
}

//=========================================================
// デストラクタ
//=========================================================
CSpBar::~CSpBar()
{
}

//=========================================================
// 初期化処理
//=========================================================
HRESULT CSpBar::Init(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	// 初期化処理
	CGage::Init(pos, size);						// 座標・サイズ
	SetColor(D3DCOLOR_RGBA(230, 0, 255, 255));	// 色の設定

	return S_OK;
}

//=========================================================
// 終了処理
//=========================================================
void CSpBar::Uninit(void)
{
	// 終了処理
	CGage::Uninit();
}

//=========================================================
// 更新処理
//=========================================================
void CSpBar::Update(void)
{
	// 更新処理
	CGage::Update();

	// リジェネのフレームカウント
	m_nRegeneCnt++;

	// カウントが一定になったら
	if (m_nRegeneCnt >= REGENE_FLAME)
	{
		// SPのリジェネ
		SpRegene();
		m_nRegeneCnt = 0;
	}
}

//=========================================================
// 描画処理
//=========================================================
void CSpBar::Draw(void)
{
	// 描画処理
	CGage::Draw();
}

//=========================================================
// SPのリジェネ処理
//=========================================================
void CSpBar::SpRegene(void)
{
	// SP回復
	HealGage(REGENE_NUM);
}
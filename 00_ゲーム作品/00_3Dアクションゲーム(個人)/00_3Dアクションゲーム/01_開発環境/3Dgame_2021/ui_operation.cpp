//=============================================================================
//
// 操作のUIクラス [ui_operation.cpp]
// Author : Konishi Yuuto
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "ui_operation.h"
#include "manager.h"
#include "renderer.h"
#include "texture.h"
#include "resource_manager.h"

//=============================================================================
// オブジェクト生成
//=============================================================================
CUiOperation* CUiOperation::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size, bool bUse)
{
	// オブジェクトを生成
	CUiOperation* pUiOperation = new CUiOperation;

	// 初期化処理
	pUiOperation->Init(pos, size);
	pUiOperation->SetUse(bUse);

	return pUiOperation;
}

//=============================================================================
// コンストラクタ
//=============================================================================
CUiOperation::CUiOperation()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CUiOperation::~CUiOperation()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CUiOperation::Init(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	// 初期化処理
	CUi::Init(pos, size);												// 座標、サイズ

	CTexture *pTexture = GET_TEXTURE_PTR;
	BindTexture(pTexture->GetTexture(CTexture::TEXTURE_NUM_OPERATION));	// テクスチャ反映

	return S_OK;
}

//================================================
// 終了処理
//================================================
void CUiOperation::Uninit(void)
{
	// 終了処理
	CUi::Uninit();
}

//================================================
// 更新処理
//================================================
void CUiOperation::Update(void)
{
	// 更新処理
	CUi::Update();
}

//================================================
// 描画処理
//================================================
void CUiOperation::Draw(void)
{
	// フラグがあれば
	if (GetUse() == true)
	{
		// 描画処理
		CUi::Draw();
	}
}